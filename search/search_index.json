{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to C4DDev! The C4DDev project aims to make the development of Cinema 4D plugins easier. It comes with a bunch of utilities in the form of C4D Plugins and command-line tools, as well as a C++ Py4D API extensions and knowledge resources. The Cinema 4D Plugins can be found in the \"Script > C4DDev\" menu. Features Prototyping A better version of the Python Generator object which allows you to implement ObjectData.Draw() inside Cinema 4D A Python Shader that allows you to prototype Python shader plugins A Python ID (very early WIP!! Contributions are welcome ) Description Resources A tool to generate unicode escape code sequences compatible with Cinema 4D STRINGTABLE files (Unicode Escape Tool Plugin) Python Extensions Provides new functions to the Cinema 4D Python API implemented in C++ for functionality that was not formerly accessible in Cinema 4D in the c4ddev module (only if C++ extensions are available, which they are when installing a release from the Releases page if not otherwise noted) Python Plugins A command-line tool to generate a Python plugin with the localimport bootstrapping code \u2013 c4ddev bootstrapper A command-line tool to generate Python code or JSON data from the resource symbols of your plugin \u2013 c4ddev symbols A command-line tool to build a byte-compiled distribution of additional Python modules as .egg files. \u2013 c4ddev pypkg A command-line tool to protect a Python Plugin File ( .pyp ). Note that this requires C4DDev with the C++ extensions installed in the Cinema 4D version that you are working with. \u2013 c4ddev source-protector Python Scripting Provides some additional Python modules c4ddev (module that implements this plugin) localimport (used in c4ddev.scripting.localimport ) nr (mostly generic programming tools used in c4ddev) nr.c4d (Cinema 4D algorithms and UI tools) To do : Some common mathematical libraries such as Numpy A context-manager to import Python modules from Python Objects/Expression Tags without polluting the global importer state, which also automatically re-imports the modules if you modified the code. \u2013 c4ddev.scripting.localimport() A \"Python Scripting Server\" which can receive Python scripts to execute inside Cinema 4D via a Socket + a Sublime Text plugin (see extras/sublime-script-sender/ ) License The MIT License (MIT) Copyright (c) 2014 Niklas Rosenstein Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Welcome to C4DDev!"},{"location":"#welcome-to-c4ddev","text":"The C4DDev project aims to make the development of Cinema 4D plugins easier. It comes with a bunch of utilities in the form of C4D Plugins and command-line tools, as well as a C++ Py4D API extensions and knowledge resources. The Cinema 4D Plugins can be found in the \"Script > C4DDev\" menu.","title":"Welcome to C4DDev!"},{"location":"#features","text":"Prototyping A better version of the Python Generator object which allows you to implement ObjectData.Draw() inside Cinema 4D A Python Shader that allows you to prototype Python shader plugins A Python ID (very early WIP!! Contributions are welcome ) Description Resources A tool to generate unicode escape code sequences compatible with Cinema 4D STRINGTABLE files (Unicode Escape Tool Plugin) Python Extensions Provides new functions to the Cinema 4D Python API implemented in C++ for functionality that was not formerly accessible in Cinema 4D in the c4ddev module (only if C++ extensions are available, which they are when installing a release from the Releases page if not otherwise noted) Python Plugins A command-line tool to generate a Python plugin with the localimport bootstrapping code \u2013 c4ddev bootstrapper A command-line tool to generate Python code or JSON data from the resource symbols of your plugin \u2013 c4ddev symbols A command-line tool to build a byte-compiled distribution of additional Python modules as .egg files. \u2013 c4ddev pypkg A command-line tool to protect a Python Plugin File ( .pyp ). Note that this requires C4DDev with the C++ extensions installed in the Cinema 4D version that you are working with. \u2013 c4ddev source-protector Python Scripting Provides some additional Python modules c4ddev (module that implements this plugin) localimport (used in c4ddev.scripting.localimport ) nr (mostly generic programming tools used in c4ddev) nr.c4d (Cinema 4D algorithms and UI tools) To do : Some common mathematical libraries such as Numpy A context-manager to import Python modules from Python Objects/Expression Tags without polluting the global importer state, which also automatically re-imports the modules if you modified the code. \u2013 c4ddev.scripting.localimport() A \"Python Scripting Server\" which can receive Python scripts to execute inside Cinema 4D via a Socket + a Sublime Text plugin (see extras/sublime-script-sender/ )","title":"Features"},{"location":"#license","text":"The MIT License (MIT) Copyright (c) 2014 Niklas Rosenstein Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"build-instructions/","text":"Build Instructions To build the C++ Py4D API extensions, you need a compiler and the Craftr build system installed on your system. To do : Document the build process with Craftr.","title":"Build Instructions"},{"location":"build-instructions/#build-instructions","text":"To build the C++ Py4D API extensions, you need a compiler and the Craftr build system installed on your system. To do : Document the build process with Craftr.","title":"Build Instructions"},{"location":"changelog/","text":"Changelog 1.7.2 (2021-08-25) general fix : fix NameError in c4ddev rpkg command v0.1.7 (devtip) c4ddev run now has options to start a specific C4D version removed the --exe argument from c4ddev run add c4ddev disable and c4ddev enable commands remove c4ddev build-loader remove c4ddev license add c4ddev bootstrapper structural update (no more Node.py stuff) make c4ddev and localimport modules available globally add Script > C4DDev menu v0.1.6 add c4ddev pluginid command fix c4ddev build-loader command and add --blob,--no-blob options move c4ddev.handlemousedrag() to c4ddev.HandleMouseDrag() rename c4ddev.fileselect_~() to c4ddev.FileSelect~() rename c4ddev.cast_node() to c4ddev.GeListNodeFromAddress() add c4ddev.GetUserAreaHandle() add c4ddev.GetClipMapHandle() add c4ddev.BlitClipMap() add c4ddev.am module fix c4ddev pypkg create directory if it doesnt exist add c4ddev init command add c4ddev::PyBaseContainer_New() v0.1.5 merge https://github.com/NiklasRosenstein/c4d-apex into C4DDev and rename everything from c4d.apex to c4ddev merge https://github.com/NiklasRosenstein/py-c4dtools into C4DDev merge https://github.com/NiklasRosenstein/c4d-sublime-script into C4DDev Rename SublimeScript to Scripting Server The Scripting Server must be enabled explicitly from the C4DDev plugin menu v0.1.4 merge https://github.com/NiklasRosenstein/c4d-deprecated-ide into C4DDev update docs add c4ddev run command rename c4ddev pip-get command to c4ddev get-pip fix c4ddev/scripting/localimport and add python/ to PYTHONPATH inside the context PyObject renamed from DrawHelper extended to allow overriding of other ObjectData methods PyShader changed interface to match the method names in ShaderData add \"Open Editor\" button Python code is now also evaluated in Material preview ResourcePackage add SetPrefix() keyword allow newlines and skippable tokens before the ResourcePackage statement v0.1.3 rewrite PyDrawHelper code (cb5aa58) fix reloading of c4ddev plugins by reloading the require module (7f61b5b) add option to install c4ddev command-line interface add c4ddev pypkg command add c4ddev build-loader command update C4DDev to be based completely on Node.py removed additional dependencies and convenience libraries like requests for now add ResourcePackage(resource_name) syntax v1.2 update require module to v0.10 merge PyDrawHelper plugin merge PyShader plugin v1.1 add .pubfile for git-publish add localimport v1.4.16 module add require v0.8 module add requests v2.10.0 module restructure c4ddev plugins to be loaded with require() restructure c4ddev modules to be loaded with require()","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#172-2021-08-25","text":"general fix : fix NameError in c4ddev rpkg command","title":"1.7.2 (2021-08-25)"},{"location":"changelog/#v017-devtip","text":"c4ddev run now has options to start a specific C4D version removed the --exe argument from c4ddev run add c4ddev disable and c4ddev enable commands remove c4ddev build-loader remove c4ddev license add c4ddev bootstrapper structural update (no more Node.py stuff) make c4ddev and localimport modules available globally add Script > C4DDev menu","title":"v0.1.7 (devtip)"},{"location":"changelog/#v016","text":"add c4ddev pluginid command fix c4ddev build-loader command and add --blob,--no-blob options move c4ddev.handlemousedrag() to c4ddev.HandleMouseDrag() rename c4ddev.fileselect_~() to c4ddev.FileSelect~() rename c4ddev.cast_node() to c4ddev.GeListNodeFromAddress() add c4ddev.GetUserAreaHandle() add c4ddev.GetClipMapHandle() add c4ddev.BlitClipMap() add c4ddev.am module fix c4ddev pypkg create directory if it doesnt exist add c4ddev init command add c4ddev::PyBaseContainer_New()","title":"v0.1.6"},{"location":"changelog/#v015","text":"merge https://github.com/NiklasRosenstein/c4d-apex into C4DDev and rename everything from c4d.apex to c4ddev merge https://github.com/NiklasRosenstein/py-c4dtools into C4DDev merge https://github.com/NiklasRosenstein/c4d-sublime-script into C4DDev Rename SublimeScript to Scripting Server The Scripting Server must be enabled explicitly from the C4DDev plugin menu","title":"v0.1.5"},{"location":"changelog/#v014","text":"merge https://github.com/NiklasRosenstein/c4d-deprecated-ide into C4DDev update docs add c4ddev run command rename c4ddev pip-get command to c4ddev get-pip fix c4ddev/scripting/localimport and add python/ to PYTHONPATH inside the context PyObject renamed from DrawHelper extended to allow overriding of other ObjectData methods PyShader changed interface to match the method names in ShaderData add \"Open Editor\" button Python code is now also evaluated in Material preview ResourcePackage add SetPrefix() keyword allow newlines and skippable tokens before the ResourcePackage statement","title":"v0.1.4"},{"location":"changelog/#v013","text":"rewrite PyDrawHelper code (cb5aa58) fix reloading of c4ddev plugins by reloading the require module (7f61b5b) add option to install c4ddev command-line interface add c4ddev pypkg command add c4ddev build-loader command update C4DDev to be based completely on Node.py removed additional dependencies and convenience libraries like requests for now add ResourcePackage(resource_name) syntax","title":"v0.1.3"},{"location":"changelog/#v12","text":"update require module to v0.10 merge PyDrawHelper plugin merge PyShader plugin","title":"v1.2"},{"location":"changelog/#v11","text":"add .pubfile for git-publish add localimport v1.4.16 module add require v0.8 module add requests v2.10.0 module restructure c4ddev plugins to be loaded with require() restructure c4ddev modules to be loaded with require()","title":"v1.1"},{"location":"getting-started/","text":"Getting Started C4DDev can be installed in two ways: Into your Cinema 4D plugins directory and as a command-line tool. Installing the C4DDev Plugins Head to the GitHub Releases page and download the latest release for your platform (Windows or macOS). Then unpack the directory into your Cinema 4D plugins directory. Cinema 4D R18/ plugins/ c4ddev/ ... Installing the C4DDev command-line tools You need either Python 2 or 3 installed on your system and the Pip package manager. Pip comes pre-installed with Python 3 on Windows, but with Python 2 you will need to run the get-pip.py script first. You may need to start the terminal with admin privileges to install Pip. > python get-pip.py After this step, you can install the command-line tools by running the following command (again, you may need admin privileges). $ pip install git+https://github.com/NiklasRosenstein/c4ddev.git Now you should be able to use the c4ddev command-line program. $ c4ddev Usage: c4ddev [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: build-loader Generate a Cinema 4D Python plugin that uses... get-pip Installs Pip into the Cinema 4D Python... pip Invokes Pip in the current Cinema 4D Python... pypkg Reads a JSON configuration file, by default... rpkg Converts a resource package file to... run Starts C4D. source-protector Protect .pyp files (requires APEX). symbols Extracts resource symbols. Beginner's Guide: Python Todo Beginner's Guide: C++ Todo","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"C4DDev can be installed in two ways: Into your Cinema 4D plugins directory and as a command-line tool.","title":"Getting Started"},{"location":"getting-started/#installing-the-c4ddev-plugins","text":"Head to the GitHub Releases page and download the latest release for your platform (Windows or macOS). Then unpack the directory into your Cinema 4D plugins directory. Cinema 4D R18/ plugins/ c4ddev/ ...","title":"Installing the C4DDev Plugins"},{"location":"getting-started/#installing-the-c4ddev-command-line-tools","text":"You need either Python 2 or 3 installed on your system and the Pip package manager. Pip comes pre-installed with Python 3 on Windows, but with Python 2 you will need to run the get-pip.py script first. You may need to start the terminal with admin privileges to install Pip. > python get-pip.py After this step, you can install the command-line tools by running the following command (again, you may need admin privileges). $ pip install git+https://github.com/NiklasRosenstein/c4ddev.git Now you should be able to use the c4ddev command-line program. $ c4ddev Usage: c4ddev [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: build-loader Generate a Cinema 4D Python plugin that uses... get-pip Installs Pip into the Cinema 4D Python... pip Invokes Pip in the current Cinema 4D Python... pypkg Reads a JSON configuration file, by default... rpkg Converts a resource package file to... run Starts C4D. source-protector Protect .pyp files (requires APEX). symbols Extracts resource symbols.","title":"Installing the C4DDev command-line tools"},{"location":"getting-started/#beginners-guide-python","text":"Todo","title":"Beginner's Guide: Python"},{"location":"getting-started/#beginners-guide-c","text":"Todo","title":"Beginner's Guide: C++"},{"location":"api/py4d/","text":"Py4D API Extensions The C4DDev Py4D API Extensions are a C++ plugin that provide additional functions that can be used from Python. Note The C++ component of C4DDev must be installed, otherwise the API extensions will not be available. Pre-compiled binaries are available in the GitHub Releases of C4DDev. Members c4ddev.__version__ The installed version of C4DDev. c4ddev.has_cpp_extensions True if the C4DDev C++ extensions are installed, otherwise False . Note that if the C++ extensions are not installed and you try to import c4ddev from a Cinema 4D plugin, importing c4ddev could fail if your plugin is executed before the C4DDev Python entrypoint. Functions c4ddev.GeListNodeFromAddress(pycobject) -> c4d.GeListNode Given a PyCObject from which you know it is a Cinema 4D GeListNode instance, you can use this function to get a real Python object out of it. Important : This will result in undefined behaviour (likely a crash) if you pass a wrong PyCObject! c4ddev.FileSelectPut(path) This extension allows you to prevent file selection dialogs from popping up and make them return a specific value. This is very useful if you want to streamline Cinema 4D commands that usually do open a file selection dialog. import c4d import c4ddev c4ddev.FileSelectPut('/Users/me/Desktop') print(c4d.storage.LoadDialog()) # Doesn't open a dialog and prints /Users/me/Desktop c4ddev.FileSelectPop() Pop an element from the elements added to the FileSelect Hook queue with FileSelectPut() . c4ddev.FileSelectQueueSize() Returns the number of elemenets in the queue added to the FileSelect Hook with FileSelectPut() . c4ddev.DocumentInfoData(pycobject) -> dict Pass the PyCObject received on MSG_DOCUMENTINFO to this function to get a dictionary of the structures data. Important : This will result in undefined behaviour (likely a crash) if you pass a wrong PyCObject! c4ddev.RenderNotificationData(pycobject) -> dict Pass the PyCObject received on MSG_MULTI_RENDERNOTIFICATION this this function to get a dictionary of the structures data. Important : This will result in undefined behaviour (likely a crash) if you pass a wrong PyCObject! c4ddev.GetUserAreaHandle() -> PyCObject c4ddev.GetClipMapHandle() -> PyCObject c4ddev.BlitClipMap(dst, src, dx, dy, dw, dh, sx, sy, sw, sh, mode) This function implements the missing functionality of the GeClipMap to copy another bitmap into another, with the ability to copy only parts and in a different scale and aspect ratio (like GeUserArea.DrawBitmap() ). Parameters Description dst The destination GeClipMap src The source GeClipMap dx The destination X coordinate. dy The destination Y coordinate. dw The destination width. dh The destination height. sx The destination X coordinate. sy The destination X coordinate. sw The destination X coordinate. sh The destination X coordinate. mode One of c4ddev.BLIT_NN , BLIT_BILINEAR or BLIT_BICUBIC Limitation Currently this function can only accept two GeClipMap objects as we haven't figured out how to retrieve the actual C pointer to a BaseBitmap from a Python c4d.bitmaps.BaseBitmap object. You can convert a bitmap to a GeClipMap using the following code: map = c4d.bitmaps.GeClipMap() map.InitWithBitmap(bmp, bmp.GetInternalChannel()) However, keep in mind that this process is relatively slow as it creates a new copy of the image. It is thus recommended to do this operation only once after a bitmap is loaded and keep it as a GeClipMap . Plugin Messages The C4DDev C++ component installs a SceneHook that takes special messages which are usually only sent to nodes in a document and redirects them as a global plugin message. Currently, the following messages sent to that scene hook are supported: MSG_DOCUMENTINFO MSG_MULTI_RENDERNOTIFICATION There's a little bit of effort involved in receiving these in Python, though. The data sent will by a PyCObject and you have to use C4DDev to read the data from these objects. import c4d import c4ddev def PluginMessage(msg, data): if msg == c4d.MSG_MULTI_RENDERNOTIFICATION: data = c4ddev.RenderNotificationData(data) print data elif msg == c4d.MSG_DOCUMENTINFO: data = c4ddev.DocumentInfoData(data) print data return True c4ddev.gui.HandleMouseDrag(area, msg, type, data, flags) This function calls GeUserArea::HandleMouseDrag() on the area object, which is missing in the Py4D API. Currently supported values for type are: DRAGTYPE_FILES (str) DRAGTYPE_FILENAME_IMAGE (str) DRAGTYPE_FILENAME_SCENE (str) DRAGTYPE_FILENAME_OTHER (str) DRAGTYPE_ATOMARRAY (list of c4d.GeListNode) The type of data is specified in the parentheses above. msg must be a c4d.BaseContainer , ideally the one passed from GeUserArea.InputEvent() . c4ddev.am.RegisterMode(id, name, callback) Registers a new mode in the Attribute Manager. The callback parameter is currently not used. Raises a RuntimeError when the registration failed. c4ddev.am.SetMode(id, open) Sets the current attribute manager mode. Optionally opens the attribute manager window. c4ddev.am.SetObject(id, op, flags, activepage) Sets the object op as the active object in the attribute manager specified by id . The activepage parameter is currently unused, but must be None or a c4d.DescID object. c4ddev.am.Open() Opens the attribute manager window. c4ddev.am.EditObjectModal(op, title) Opens a modal attribute manager to edit the object op . The window title will be set to title . Returns True on success, False on failure. Command-line -c4ddev-protect-source <filename> When the C4DDev C++ extensions are available in a Cinema 4D installation, this command-line argument can be used to protect the source code of a Cinema 4D Python Plugin ( .pyp ), creating a .pype (before R15) or .pypv file (R15 and later). The argument can be specified multiple times to protected multiple files with a single invocation. The c4ddev source-protector command can be used to protect source files from the Command-line conveniently. $ c4ddev source-protector myplugin.pyp ... [c4ddev / INFO]: Calling Source Protector for 'myplugin.pyp'. Alternatively, you can run Cinema 4D directly via the command-line or use the c4ddev run command. $ /Applications/Cinema 4D R16/plugins/myplugin $ \"..\\..\\CINEMA 4D.exe\" -nogui -c4ddev-protect-source myplugin.pyp","title":"Py4D API Extensions"},{"location":"api/py4d/#py4d-api-extensions","text":"The C4DDev Py4D API Extensions are a C++ plugin that provide additional functions that can be used from Python. Note The C++ component of C4DDev must be installed, otherwise the API extensions will not be available. Pre-compiled binaries are available in the GitHub Releases of C4DDev.","title":"Py4D API Extensions"},{"location":"api/py4d/#members","text":"","title":"Members"},{"location":"api/py4d/#c4ddev__version__","text":"The installed version of C4DDev.","title":"c4ddev.__version__"},{"location":"api/py4d/#c4ddevhas_cpp_extensions","text":"True if the C4DDev C++ extensions are installed, otherwise False . Note that if the C++ extensions are not installed and you try to import c4ddev from a Cinema 4D plugin, importing c4ddev could fail if your plugin is executed before the C4DDev Python entrypoint.","title":"c4ddev.has_cpp_extensions"},{"location":"api/py4d/#functions","text":"","title":"Functions"},{"location":"api/py4d/#c4ddevgelistnodefromaddresspycobject-c4dgelistnode","text":"Given a PyCObject from which you know it is a Cinema 4D GeListNode instance, you can use this function to get a real Python object out of it. Important : This will result in undefined behaviour (likely a crash) if you pass a wrong PyCObject!","title":"c4ddev.GeListNodeFromAddress(pycobject) -&gt; c4d.GeListNode"},{"location":"api/py4d/#c4ddevfileselectputpath","text":"This extension allows you to prevent file selection dialogs from popping up and make them return a specific value. This is very useful if you want to streamline Cinema 4D commands that usually do open a file selection dialog. import c4d import c4ddev c4ddev.FileSelectPut('/Users/me/Desktop') print(c4d.storage.LoadDialog()) # Doesn't open a dialog and prints /Users/me/Desktop","title":"c4ddev.FileSelectPut(path)"},{"location":"api/py4d/#c4ddevfileselectpop","text":"Pop an element from the elements added to the FileSelect Hook queue with FileSelectPut() .","title":"c4ddev.FileSelectPop()"},{"location":"api/py4d/#c4ddevfileselectqueuesize","text":"Returns the number of elemenets in the queue added to the FileSelect Hook with FileSelectPut() .","title":"c4ddev.FileSelectQueueSize()"},{"location":"api/py4d/#c4ddevdocumentinfodatapycobject-dict","text":"Pass the PyCObject received on MSG_DOCUMENTINFO to this function to get a dictionary of the structures data. Important : This will result in undefined behaviour (likely a crash) if you pass a wrong PyCObject!","title":"c4ddev.DocumentInfoData(pycobject) -&gt; dict"},{"location":"api/py4d/#c4ddevrendernotificationdatapycobject-dict","text":"Pass the PyCObject received on MSG_MULTI_RENDERNOTIFICATION this this function to get a dictionary of the structures data. Important : This will result in undefined behaviour (likely a crash) if you pass a wrong PyCObject!","title":"c4ddev.RenderNotificationData(pycobject) -&gt; dict"},{"location":"api/py4d/#c4ddevgetuserareahandle-pycobject","text":"","title":"c4ddev.GetUserAreaHandle() -&gt; PyCObject"},{"location":"api/py4d/#c4ddevgetclipmaphandle-pycobject","text":"","title":"c4ddev.GetClipMapHandle() -&gt; PyCObject"},{"location":"api/py4d/#c4ddevblitclipmapdst-src-dx-dy-dw-dh-sx-sy-sw-sh-mode","text":"This function implements the missing functionality of the GeClipMap to copy another bitmap into another, with the ability to copy only parts and in a different scale and aspect ratio (like GeUserArea.DrawBitmap() ). Parameters Description dst The destination GeClipMap src The source GeClipMap dx The destination X coordinate. dy The destination Y coordinate. dw The destination width. dh The destination height. sx The destination X coordinate. sy The destination X coordinate. sw The destination X coordinate. sh The destination X coordinate. mode One of c4ddev.BLIT_NN , BLIT_BILINEAR or BLIT_BICUBIC Limitation Currently this function can only accept two GeClipMap objects as we haven't figured out how to retrieve the actual C pointer to a BaseBitmap from a Python c4d.bitmaps.BaseBitmap object. You can convert a bitmap to a GeClipMap using the following code: map = c4d.bitmaps.GeClipMap() map.InitWithBitmap(bmp, bmp.GetInternalChannel()) However, keep in mind that this process is relatively slow as it creates a new copy of the image. It is thus recommended to do this operation only once after a bitmap is loaded and keep it as a GeClipMap .","title":"c4ddev.BlitClipMap(dst, src, dx, dy, dw, dh, sx, sy, sw, sh, mode)"},{"location":"api/py4d/#plugin-messages","text":"The C4DDev C++ component installs a SceneHook that takes special messages which are usually only sent to nodes in a document and redirects them as a global plugin message. Currently, the following messages sent to that scene hook are supported: MSG_DOCUMENTINFO MSG_MULTI_RENDERNOTIFICATION There's a little bit of effort involved in receiving these in Python, though. The data sent will by a PyCObject and you have to use C4DDev to read the data from these objects. import c4d import c4ddev def PluginMessage(msg, data): if msg == c4d.MSG_MULTI_RENDERNOTIFICATION: data = c4ddev.RenderNotificationData(data) print data elif msg == c4d.MSG_DOCUMENTINFO: data = c4ddev.DocumentInfoData(data) print data return True","title":"Plugin Messages"},{"location":"api/py4d/#c4ddevguihandlemousedragarea-msg-type-data-flags","text":"This function calls GeUserArea::HandleMouseDrag() on the area object, which is missing in the Py4D API. Currently supported values for type are: DRAGTYPE_FILES (str) DRAGTYPE_FILENAME_IMAGE (str) DRAGTYPE_FILENAME_SCENE (str) DRAGTYPE_FILENAME_OTHER (str) DRAGTYPE_ATOMARRAY (list of c4d.GeListNode) The type of data is specified in the parentheses above. msg must be a c4d.BaseContainer , ideally the one passed from GeUserArea.InputEvent() .","title":"c4ddev.gui.HandleMouseDrag(area, msg, type, data, flags)"},{"location":"api/py4d/#c4ddevamregistermodeid-name-callback","text":"Registers a new mode in the Attribute Manager. The callback parameter is currently not used. Raises a RuntimeError when the registration failed.","title":"c4ddev.am.RegisterMode(id, name, callback)"},{"location":"api/py4d/#c4ddevamsetmodeid-open","text":"Sets the current attribute manager mode. Optionally opens the attribute manager window.","title":"c4ddev.am.SetMode(id, open)"},{"location":"api/py4d/#c4ddevamsetobjectid-op-flags-activepage","text":"Sets the object op as the active object in the attribute manager specified by id . The activepage parameter is currently unused, but must be None or a c4d.DescID object.","title":"c4ddev.am.SetObject(id, op, flags, activepage)"},{"location":"api/py4d/#c4ddevamopen","text":"Opens the attribute manager window.","title":"c4ddev.am.Open()"},{"location":"api/py4d/#c4ddevameditobjectmodalop-title","text":"Opens a modal attribute manager to edit the object op . The window title will be set to title . Returns True on success, False on failure.","title":"c4ddev.am.EditObjectModal(op, title)"},{"location":"api/py4d/#command-line","text":"","title":"Command-line"},{"location":"api/py4d/#-c4ddev-protect-source-filename","text":"When the C4DDev C++ extensions are available in a Cinema 4D installation, this command-line argument can be used to protect the source code of a Cinema 4D Python Plugin ( .pyp ), creating a .pype (before R15) or .pypv file (R15 and later). The argument can be specified multiple times to protected multiple files with a single invocation. The c4ddev source-protector command can be used to protect source files from the Command-line conveniently. $ c4ddev source-protector myplugin.pyp ... [c4ddev / INFO]: Calling Source Protector for 'myplugin.pyp'. Alternatively, you can run Cinema 4D directly via the command-line or use the c4ddev run command. $ /Applications/Cinema 4D R16/plugins/myplugin $ \"..\\..\\CINEMA 4D.exe\" -nogui -c4ddev-protect-source myplugin.pyp","title":"-c4ddev-protect-source &lt;filename&gt;"},{"location":"c4ddev/cli/","text":"Command-line Tools Check out the Getting Started guide for the install instructions. c4ddev Usage: c4ddev [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: build-loader Generate a Cinema 4D Python plugin that uses... get-pip Installs Pip into the Cinema 4D Python... init Create template source and description files... pip Invokes Pip in the current Cinema 4D Python... pypkg Reads a JSON configuration file, by default... rpkg Converts a resource package file to... run Starts C4D. source-protector Protect .pyp files (requires APEX). symbols Extracts resource symbols. c4ddev disable Usage: c4ddev.exe disable [OPTIONS] [PLUGIN] Disable the Cinema 4D PLUGIN by moving it to a `plugins_disabled` directory. Use the `c4ddev enable` command to reverse the process. If PLUGIN is not the name of a directory in the Cinema 4D plugins directory, the closest match will be used. When no PLUGIN is specified, a list of the directories in the plugins directory will be printed. Options: --help Show this message and exit. c4ddev enable Usage: c4ddev.exe enable [OPTIONS] [PLUGIN] Enable a disabled plugin. Options: --help Show this message and exit. c4ddev init Usage: c4ddev init [OPTIONS] DESCRIPTION_NAME ... Create template source and description files for one or more Cinema 4D plugins. Options: -O, --object TEXT -T, --tag TEXT -X, --shader TEXT -Gv, --xnode TEXT -M, --material TEXT --main Generate a main.cpp template. -R, --rpkg Create .rpkg files instead of description header and stringtable files. --src TEXT Source code directory. If not specified, defaults to src/ or source/, depending on which exists. -P, --pluginid Grab plugin IDs from the PluginCafe for the plugins that are being created. --overwrite --help Show this message and exit. c4ddev license Usage: c4ddev.exe license [OPTIONS] NAME Output a license string, optionally formatted for a specific language. Options: -l, --list Output a list of available licenses. --short / --long Outputs the short or long license version (default is --short). --python Output the license as Python comments (#). --c Output the license as C comments (/ /). --java Output the license as Java comments (/* /) --help Show this message and exit. Currently supported license types: apache-v2 gpl-v2 gpl-v3 mit unlicense c4ddev get-pip Usage: c4ddev get-pip [OPTIONS] Installs Pip into the Cinema 4D Python distribution. Specify the path to Cinema 4D explicitly or run this command from inside the Cinema 4D application directory. Options: --c4d DIRECTORY --help Show this message and exit c4ddev pip Usage: c4ddev pip [OPTIONS] [ARGS]... Invokes Pip in the current Cinema 4D Python distribution. Must be used from inside the Cinema 4D applications directory or specified with --c4d. Options: --c4d DIRECTORY --help Show this message and exit. c4ddev pluginid Usage: c4ddev pluginid [OPTIONS] [TITLES]... Get one or more plugin IDs from the plugincafe. If the username and/or password are not specified on the command-line, they will be queried during execution. Options: -u, --username TEXT -p, --password TEXT -l, --list List all registered plugin IDs. --help Show this message and exit. Example : $ c4ddev pluginid -u nux95 MyPluginId PluginCafe Password: MyPluginId: 1039296 $ c4ddev pluginid -u nux95 --list | wc PluginCafe Password: 536 1180 15994 c4ddev pypkg Usage: c4ddev pypkg [OPTIONS] [CONFIG] Options: --help Show this message and exit. The pypkg command compiles Python modules and packages into .pyc files and merges them into a Python Egg archive or directory. This is useful to protect your Python code and to distribute your Python plugin. Note Keep in mind that you should always use localimport to import any third-party Python modules from a Cinema 4D plugin in order to keep the global importer state clean. Example Configuration ( .pypkg ) This is a real-world example configuration file. { \"zipped\": true, \"output\": \"res/modules{target}/mylibs.egg\", \"include\": [ \"devel/res.py\", \"../vendor/py-nr/nr\" ] } c4ddev rpkg Usage: c4ddev rpkg [OPTIONS] RPKG Converts a resource package file to description resource files. Options: -r, --res DIRETORY --no-header TEXT --help Show this message and exit. See also: Resource Packages c4ddev run Usage: c4ddev run [OPTIONS] [ARGS]... Starts C4D. Options: -e, --exe TEXT Name of the C4D executable to run. Defaults to \"CINEMA 4D\". --help Show this message and exit. Finds the Cinema 4D application directory from the current working directory and starts CINEMA 4D.exe or CINEMA 4D.app/Contents/MacOS/CINEMA 4D , depending on your platform. Additional arguments are passed to Cinema 4D. On Windows, Cinema 4D is started with the start /b /wait \"parentconsole\" command, which will cause the current terminal to inherit the output instead of Cinema 4D creating a separate terminal window. c4ddev source-protector Usage: c4ddev source-protector [OPTIONS] FILENAME [FILENAME [...]] Protect .pyp files (requires APEX). Options: --help Show this message and exit. Protects a Cinema 4D Python Plugin ( .pyp ). Requires the C4DDev C++ parts installed. More information on the API Extensions page. If the C++ parts are not installed, nothing will happen and no error will be printed. c4ddev symbols Usage: c4ddev symbols [OPTIONS] Options: -f, --format FORMAT The output format, one of {class,file,json}. Defaults to class. -o, --outfile FILENAME -d, --res-dir DIRECTORY One or more resource directories to parse for symbols. If the option is not specified, `res/` will be used. --help Show this message and exit. Extracts the resource symbols from all header files in res/ directory or the directory/ies specified via -d,--res-dir and formats them as a Python class, Python file or JSON. $ pwd /Users/niklas/Applications/Cinema 4D R18/plugins/myplugin $ c4ddev symbols exec (\"\"\"class res(object): # Automatically generated with c4ddev v1.3. project_path = os.path.dirname(__file__) def string(self, name, *subst): result = __res__.LoadString(getattr(self, name)) for item in subst: result = result.replace('#', item, 1) return result def tup(self, name, *subst): return (getattr(self, name), self.string(name, *subst)) def path(self, *parts): path = os.path.join(*parts) if not os.path.isabs(path): path = os.path.join(self.project_path, path) return path file = path # backwards compatibility def bitmap(self, *parts): b = c4d.bitmaps.BaseBitmap() if b.InitWith(self.path(*parts))[0] != c4d.IMAGERESULT_OK: return None return b MYSYMBOL = 1000 MYOTHERSYMBOLS = 1001 res=res()\"\"\") Available Formats Python class ( class ) [default] -- Can be copied into the Python plugin source Python file ( file ) -- Can be loaded as a module (make use of localimport ) JSON ( json ) -- Can be loaded using the json module","title":"Command-line Tools"},{"location":"c4ddev/cli/#command-line-tools","text":"Check out the Getting Started guide for the install instructions.","title":"Command-line Tools"},{"location":"c4ddev/cli/#c4ddev","text":"Usage: c4ddev [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: build-loader Generate a Cinema 4D Python plugin that uses... get-pip Installs Pip into the Cinema 4D Python... init Create template source and description files... pip Invokes Pip in the current Cinema 4D Python... pypkg Reads a JSON configuration file, by default... rpkg Converts a resource package file to... run Starts C4D. source-protector Protect .pyp files (requires APEX). symbols Extracts resource symbols.","title":"c4ddev"},{"location":"c4ddev/cli/#c4ddev-disable","text":"Usage: c4ddev.exe disable [OPTIONS] [PLUGIN] Disable the Cinema 4D PLUGIN by moving it to a `plugins_disabled` directory. Use the `c4ddev enable` command to reverse the process. If PLUGIN is not the name of a directory in the Cinema 4D plugins directory, the closest match will be used. When no PLUGIN is specified, a list of the directories in the plugins directory will be printed. Options: --help Show this message and exit.","title":"c4ddev disable"},{"location":"c4ddev/cli/#c4ddev-enable","text":"Usage: c4ddev.exe enable [OPTIONS] [PLUGIN] Enable a disabled plugin. Options: --help Show this message and exit.","title":"c4ddev enable"},{"location":"c4ddev/cli/#c4ddev-init","text":"Usage: c4ddev init [OPTIONS] DESCRIPTION_NAME ... Create template source and description files for one or more Cinema 4D plugins. Options: -O, --object TEXT -T, --tag TEXT -X, --shader TEXT -Gv, --xnode TEXT -M, --material TEXT --main Generate a main.cpp template. -R, --rpkg Create .rpkg files instead of description header and stringtable files. --src TEXT Source code directory. If not specified, defaults to src/ or source/, depending on which exists. -P, --pluginid Grab plugin IDs from the PluginCafe for the plugins that are being created. --overwrite --help Show this message and exit.","title":"c4ddev init"},{"location":"c4ddev/cli/#c4ddev-license","text":"Usage: c4ddev.exe license [OPTIONS] NAME Output a license string, optionally formatted for a specific language. Options: -l, --list Output a list of available licenses. --short / --long Outputs the short or long license version (default is --short). --python Output the license as Python comments (#). --c Output the license as C comments (/ /). --java Output the license as Java comments (/* /) --help Show this message and exit. Currently supported license types: apache-v2 gpl-v2 gpl-v3 mit unlicense","title":"c4ddev license"},{"location":"c4ddev/cli/#c4ddev-get-pip","text":"Usage: c4ddev get-pip [OPTIONS] Installs Pip into the Cinema 4D Python distribution. Specify the path to Cinema 4D explicitly or run this command from inside the Cinema 4D application directory. Options: --c4d DIRECTORY --help Show this message and exit","title":"c4ddev get-pip"},{"location":"c4ddev/cli/#c4ddev-pip","text":"Usage: c4ddev pip [OPTIONS] [ARGS]... Invokes Pip in the current Cinema 4D Python distribution. Must be used from inside the Cinema 4D applications directory or specified with --c4d. Options: --c4d DIRECTORY --help Show this message and exit.","title":"c4ddev pip"},{"location":"c4ddev/cli/#c4ddev-pluginid","text":"Usage: c4ddev pluginid [OPTIONS] [TITLES]... Get one or more plugin IDs from the plugincafe. If the username and/or password are not specified on the command-line, they will be queried during execution. Options: -u, --username TEXT -p, --password TEXT -l, --list List all registered plugin IDs. --help Show this message and exit. Example : $ c4ddev pluginid -u nux95 MyPluginId PluginCafe Password: MyPluginId: 1039296 $ c4ddev pluginid -u nux95 --list | wc PluginCafe Password: 536 1180 15994","title":"c4ddev pluginid"},{"location":"c4ddev/cli/#c4ddev-pypkg","text":"Usage: c4ddev pypkg [OPTIONS] [CONFIG] Options: --help Show this message and exit. The pypkg command compiles Python modules and packages into .pyc files and merges them into a Python Egg archive or directory. This is useful to protect your Python code and to distribute your Python plugin. Note Keep in mind that you should always use localimport to import any third-party Python modules from a Cinema 4D plugin in order to keep the global importer state clean. Example Configuration ( .pypkg ) This is a real-world example configuration file. { \"zipped\": true, \"output\": \"res/modules{target}/mylibs.egg\", \"include\": [ \"devel/res.py\", \"../vendor/py-nr/nr\" ] }","title":"c4ddev pypkg"},{"location":"c4ddev/cli/#c4ddev-rpkg","text":"Usage: c4ddev rpkg [OPTIONS] RPKG Converts a resource package file to description resource files. Options: -r, --res DIRETORY --no-header TEXT --help Show this message and exit. See also: Resource Packages","title":"c4ddev rpkg"},{"location":"c4ddev/cli/#c4ddev-run","text":"Usage: c4ddev run [OPTIONS] [ARGS]... Starts C4D. Options: -e, --exe TEXT Name of the C4D executable to run. Defaults to \"CINEMA 4D\". --help Show this message and exit. Finds the Cinema 4D application directory from the current working directory and starts CINEMA 4D.exe or CINEMA 4D.app/Contents/MacOS/CINEMA 4D , depending on your platform. Additional arguments are passed to Cinema 4D. On Windows, Cinema 4D is started with the start /b /wait \"parentconsole\" command, which will cause the current terminal to inherit the output instead of Cinema 4D creating a separate terminal window.","title":"c4ddev run"},{"location":"c4ddev/cli/#c4ddev-source-protector","text":"Usage: c4ddev source-protector [OPTIONS] FILENAME [FILENAME [...]] Protect .pyp files (requires APEX). Options: --help Show this message and exit. Protects a Cinema 4D Python Plugin ( .pyp ). Requires the C4DDev C++ parts installed. More information on the API Extensions page. If the C++ parts are not installed, nothing will happen and no error will be printed.","title":"c4ddev source-protector"},{"location":"c4ddev/cli/#c4ddev-symbols","text":"Usage: c4ddev symbols [OPTIONS] Options: -f, --format FORMAT The output format, one of {class,file,json}. Defaults to class. -o, --outfile FILENAME -d, --res-dir DIRECTORY One or more resource directories to parse for symbols. If the option is not specified, `res/` will be used. --help Show this message and exit. Extracts the resource symbols from all header files in res/ directory or the directory/ies specified via -d,--res-dir and formats them as a Python class, Python file or JSON. $ pwd /Users/niklas/Applications/Cinema 4D R18/plugins/myplugin $ c4ddev symbols exec (\"\"\"class res(object): # Automatically generated with c4ddev v1.3. project_path = os.path.dirname(__file__) def string(self, name, *subst): result = __res__.LoadString(getattr(self, name)) for item in subst: result = result.replace('#', item, 1) return result def tup(self, name, *subst): return (getattr(self, name), self.string(name, *subst)) def path(self, *parts): path = os.path.join(*parts) if not os.path.isabs(path): path = os.path.join(self.project_path, path) return path file = path # backwards compatibility def bitmap(self, *parts): b = c4d.bitmaps.BaseBitmap() if b.InitWith(self.path(*parts))[0] != c4d.IMAGERESULT_OK: return None return b MYSYMBOL = 1000 MYOTHERSYMBOLS = 1001 res=res()\"\"\") Available Formats Python class ( class ) [default] -- Can be copied into the Python plugin source Python file ( file ) -- Can be loaded as a module (make use of localimport ) JSON ( json ) -- Can be loaded using the json module","title":"c4ddev symbols"},{"location":"c4ddev/plugins/","text":"Plugins C4D IDE Also a very old plugin that is not very progressed and also currently provides two different approaches to implementing a Python IDE in Cinema 4D. PyObject An alternative to the Cinema 4D standard Python Generator object that allows you to implement a number of other ObjectData methods. PyShader This simple Cinema 4D plugin allows you to write shaders on-the-fly or prototype for a native shader plugin. Unicode Escape Tool String resources require special characters to be escaped with unicode escape sequences in the format of \\UXXXX . The \"Unicode Escape Tool\" can handle this for you. Just enter or paste the stringtable or text and you can convert it. Resource Packages You don't need this tool if you make use of ResourcePackages . Non-ascii characters will be escaped automatically when a stringtable is generated from the ResourcePackage. Scripting Server See Scripting","title":"Plugins"},{"location":"c4ddev/plugins/#plugins","text":"","title":"Plugins"},{"location":"c4ddev/plugins/#c4d-ide","text":"Also a very old plugin that is not very progressed and also currently provides two different approaches to implementing a Python IDE in Cinema 4D.","title":"C4D IDE"},{"location":"c4ddev/plugins/#pyobject","text":"An alternative to the Cinema 4D standard Python Generator object that allows you to implement a number of other ObjectData methods.","title":"PyObject"},{"location":"c4ddev/plugins/#pyshader","text":"This simple Cinema 4D plugin allows you to write shaders on-the-fly or prototype for a native shader plugin.","title":"PyShader"},{"location":"c4ddev/plugins/#unicode-escape-tool","text":"String resources require special characters to be escaped with unicode escape sequences in the format of \\UXXXX . The \"Unicode Escape Tool\" can handle this for you. Just enter or paste the stringtable or text and you can convert it. Resource Packages You don't need this tool if you make use of ResourcePackages . Non-ascii characters will be escaped automatically when a stringtable is generated from the ResourcePackage.","title":"Unicode Escape Tool"},{"location":"c4ddev/plugins/#scripting-server","text":"See Scripting","title":"Scripting Server"},{"location":"resources/cpp/","text":"C++ Resources This page contains a list of resources about Cinema 4D C++ plugin development and useful links. Posts Drawing Text in the Viewport Saving EXR Exposing C++ functionality to Python Viewport HUD API Saving Custom GUI layouts Tools craftr:NiklasRosenstein.maxon.c4d -- Build Cinema 4D Plugins on Windows, macOS and Linux Snippets Hide Dialog Menubar There is a non-member function available in the SDK that can be accessed through the C4DOS to add special gadgets to the dialog, and it appears that the state \"no menubar\" is also represented internally as a dialog gadgets. inline Bool AddGadget(GeDialog* dlg, Int32 gadget_type) { String const name; BaseContainer const bc; return C4DOS.Cd->AddGadget(dlg->Get(), gadget_type, 0, &name, 0, 0, 0, 0, &bc, nullptr); } The gadget to remove the dialog menubar is DIALOG_NOMENUBAR . Be aware when adding this gadget: Adding it inside CreateLayout() won't work and calling it afterwards will crash C4D. You can call the function in the dialog's constructor though! class MyDialog : public GeDialog() { public: MyDialog() : GeDialog() { AddGadget(this, DIALOG_NOMENUBAR); } };","title":"C++ Resources"},{"location":"resources/cpp/#c-resources","text":"This page contains a list of resources about Cinema 4D C++ plugin development and useful links.","title":"C++ Resources"},{"location":"resources/cpp/#posts","text":"Drawing Text in the Viewport Saving EXR Exposing C++ functionality to Python Viewport HUD API Saving Custom GUI layouts","title":"Posts"},{"location":"resources/cpp/#tools","text":"craftr:NiklasRosenstein.maxon.c4d -- Build Cinema 4D Plugins on Windows, macOS and Linux","title":"Tools"},{"location":"resources/cpp/#snippets","text":"","title":"Snippets"},{"location":"resources/cpp/#hide-dialog-menubar","text":"There is a non-member function available in the SDK that can be accessed through the C4DOS to add special gadgets to the dialog, and it appears that the state \"no menubar\" is also represented internally as a dialog gadgets. inline Bool AddGadget(GeDialog* dlg, Int32 gadget_type) { String const name; BaseContainer const bc; return C4DOS.Cd->AddGadget(dlg->Get(), gadget_type, 0, &name, 0, 0, 0, 0, &bc, nullptr); } The gadget to remove the dialog menubar is DIALOG_NOMENUBAR . Be aware when adding this gadget: Adding it inside CreateLayout() won't work and calling it afterwards will crash C4D. You can call the function in the dialog's constructor though! class MyDialog : public GeDialog() { public: MyDialog() : GeDialog() { AddGadget(this, DIALOG_NOMENUBAR); } };","title":"Hide Dialog Menubar"},{"location":"resources/py4d-imports-howto/","text":"Py4D Imports: How-To When using and distributing third-party modules in a Cinema 4D Python plugin, many problems can arise when used incorrectly. Some users have hundreds of Cinema 4D plugins, and many of them use third-party modules. Some plugins will stop working when another plugin delivers the same third-party module in a different version or even one with the same name but completely different functionality! When you import modules from your Python Plugin's directory, you should never do it the naive way, unless you EXPLICITLY WANT these third-party modules to be accessible from the outside (eg. when exposing a Python API for your plugin). import os, sys sys.path.append(os.path.join(os.path.dirname(__file__), 'lib')) import some_module # The module will live on in sys.modules after the plugin finished loading Warning Using the naive approach shown above is dangerous and can lead to incompatibilties between plugins. Using the Node.Py Runtime It is generally recommended to make use of the Node.Py runtime. This can be achieved by generating a stand-alone version using the c4ddev build-loader command. $ c4ddev build-loader -cmo loader.pyp -e myentrypoint The generated loader.pyp contains the Node.Py runtime and its dependencies and will load myentrypoint.py when the plugin is loaded. This file will then have full access to the Node.Py runtime and can make use of the nodepy-pm package manager. $ nodepy-pm install py/numpy $ tree | loader.pyp | myentrypoint.py | utils.py | nodepy_modules/ \\-| .pip/ \\-| Lib/ \\-| site-packages/ \\-| numpy/ ... | numpy-1.9.2.dist-info/ ... $ cat myentrypoint # myentrypoint.py import numpy # loaded from nodepy_modules/.pip/Lib/site-packages utils = require('./utils') # Register your C4D Python plugins ... The Node.Py runtime will manage the full isolation of the module environment (using localimport ) and imported Python modules will not be visible to other plugins. Note C4DDev currently provides no mechanism to automatically compile Python sources and package them as it does with the c4ddev pypkg command. There is an outstanding task to bring this feature to C4DDev: NiklasRosenstein/c4ddev#8 Using localimport Using the localimport module allows you to import Python modules in an isolated environment and will ensure that other plugins will not see the modules that another plugin has imported. with localimport(['lib']) as _importer: # This line would not be necessary if everyone would use localimport, # but since we can not garuantee that... _importer.disable(['some_module']) import some_module assert 'some_module' in sys.modules assert 'some_module' not in sys.modules But how do you use localimport when it is a module, too? The answer is a minified version that you can copy&paste directly into your plugins source code. Below is a minified version of localimport-v1.5 . Other (and eventually newer) versions are available here . # localimport-v1.7.3-blob-mcw99 import base64 as b, types as t, zlib as z; m=t.ModuleType('localimport'); m.__file__ = __file__; blob=b'\\ eJydWUuP20YSvutXEMiBpIfmeOLDAkJo7GaRAMEGORiLPUQrEBTVkumhSKK75Uhj5L+nHv2iSNpyfBiTXY+uqq76qpoqy+qsP\\ /SyLIv4t+a5rVT0vleiU1o0XfSDdM8dEf95PFVNm9f96V28KstPQqqm71D4Kf9H/jZeNaehlzqq++Fqn49tv7PPvbJPw/PxrJ\\ vWvqqro2hZ1WJX1c924aUZDk0rVs0B2XK7adMd+s2bbVF8v15Fe3GIGi1OKrmk8BpJoc+yiy45L6aOQy5xScspWiWWNbaN0ol\\ Te4de0klMqmz7umoTdKarTiIbKv0B9aGMXSx6leN6Xu0U/u+4YatDLyNcK/E9gvOxCnBPR5hocBRQETVkiDrvRsozz4O6rAP/\\ lWexsi8/VxAY64lVgH9AWIqOvNDyyv63SHCWmPcR9yoSl1oMOvpf1Z7FT1L2MggdbRa5va1C1Fif5b6REcSi67Wl5EpXUqs/G\\ tiFdkUejrv4VLXlEDqr4FiAnO2F0sVvfScyzjRFL+gHRAmJ4GmES2gYMWP+4XbEgdtbDxuF2v1heVdWERoV9YPovAWxjFMotc\\ OAfHisTbcXl6xtOjpX0Z1PQlYaFA58ILAdEkM3YzY6ZgY6WPYitBr+iYuo0f+Syd4I2vPhiXZNidekPqljXXk1gOH7ZEGKxLw\\ U0Qoy9ADPSfxdnDrjkPbuzRqpxLJZ09KWGNwqeCibIXFi4yBDSie0sbGSxCz5Y990iX2B80Vz/YkEbo6kul6eKDk93QQ7qro9\\ P6ARcCyYAmZjfMybTgkI6Bur2iQr0jjzliKP/F2fWU/Invj/XfwqYcrrp/RhHAxTWKgxAfQdMNmQI/MphbQ49XX1Y6XET/QIa\\ InCDljzQTadLoHPQJO4aDjkkmsUStSmMNIAfUuT3S+OEOFDLtm8+JFO2XhvseklxyeCS6AOI2Sik3pFOtTQNjqJc7L8hbhAH3\\ NMGZqu0eVwLeKypMcyfgCdYL4Sw0M8XGPHUi/y1J6pX2TqgenUc0gKcgLiEkAwemjBYM2watoUZGlpHgnvOFXN+cEJHo+F5fy\\ 9GX62bAQJxFHt97RrEkQepDIKzkP8aC3Owd0UzPk6W30nXx9zQQMuhehNZ2GgG/682FZCXhtrqVZIzBaLjZ4pGPtqAYV4GT4o\\ RxMblB+r/e/8mNmlXyt5FCZYpvKHSqloFWDPksXOWLDV4wigAx8Omr1stTuKG5if7mMSKsVA38tcfxN3n6azQf+GmJuQc6FuJ\\ gB4STG7L6Gi7apuMdI0uBgU63cfRU3dHqx6+1zMzGTvirdARXTojqW+DkIVCbxlKdhOQnRuyQ4QipkyM0jZZEyUaA9ZMC6UcG\\ Lcqvd9CemrCpxN8AXq0j3DLNvvsUu0gtZSU5oYHq+HonOQCDVoe3kUmt6SpzQ/lDiuwvBhUgbwAY8F8AHDQmw2AZ1Zty1nMsG\\ h1MZr2tJBoofEV2y2di6DhqKrrjaIQByjKKY+1Td8PNH8UGhnhmn3vBn0FqIDaF41MID52SyJYdKqdPNJcMbtzhoEAzmDXtMx\\ 1GSy5QtGzdUsv8vHMaOLV5jNZVjeJjPYAc/OzS3Bc83xz7TESm6gr3IQj1N/Oiehq9IfEa/1+3ML+fz5T7ticpD/s4tNV9Z9p\\ 2Hvgudmzxwm6fjVZYUbGZRLjmCrNYdDdIUSmielSRI49zkaSD90SLgnDLAHhMEOggcjiTuu0ammw1tBZIzIAYySQ5eaYdMN25\\ 0/aB60nUlu2r511oEApIqQBgVSHl24ffrLYymF6s+yFlSpHSB6rQu8duZ7IQZ8SEZcOVkCBVkLONL6uToKRTbvBUCcFJ5cjOU\\ mdMraL7OwZ+WcqBnOfiFH3K3HOoAIN2+UoZBiAAktis8xC8Vr/j+LJ1LxerKUgRQegorXn//MYnyM13aS2ay3WeyyntfdKxFN\\ plppvsTnwfwYr2cWMyoWv4nPBbMeblKMa+9hRF9F0Yz+Ing2kPgsrhnUKiYuX8LD6vUzmY/nxvu23YD0lpqDEciHfkhgMRhYo\\ v+IK58fziJUkp6fFcDLytaenfmVPmlfoD7316u5q9pILA2C+FCEllPgt4uee7vcZZIYwmviIMWhuRQgnEsAa93grYHGbujntl\\ N8qFSltQw15tA9ExZOM+hxVPSlvZRCIreTuPCdMVAHxKlo6J9NWXMwVOZU4iCZW0FGoHClmEmVkUjGL1gcLH+L3fwBJMTfAK7\\ Xri0Fi0lwFUKag7SLn2tewWbBZHKzKX+Aofb7/gxoe7IN2NBJhhBS7Knp0nBGHpl2sXRJwQ3DcXGaQhz6QOHN6DhWPeoxN7oD\\ HXcpxQq39rpqd9lKROWiRYMvLc544vFr60acCe94i9t+bw3EBTTQNv0w7yn/0tmaM98CRzUHXNh5+sHNA/6TH5RQWAdmTMzoY\\ 1QwyFl+8h52dA6BVbtz00JjLnlPhvtwUOXCdnfp7Cksa2Yxcz+abIIyZyBVMQtsZ40NPyJ5p00h0TRhFyNI6pFP0y+kQdKkIS\\ 6MYHYBp8Pl87DHr2nzaP/FQ1wQcQ3EDLYUJoyx/1yxef39NmgXv+DHLtswvIzt+O4YSheO8N1WRng+5mRDeA1EtiZafHJMyG4\\ tfNqix2EAbHHPR8ABcdBBb9A9QF/uxkv9cjIP3Daz+cFgWuULM8FI58ygsr1jrrxrzrPZMZm+tlMVM1NoXreikjzHf515JpPN\\ GEh5PDNe2nAvXEuoQzttpl1NfLEXcrLC3x+/4n8yEmAgvclXT9+uvrV732hHy6FE6/6TkP7qYHqxVYZ5bVDSpLbpQkaaejg5y\\ 0xhow4u6ExcvKJveFww6sYfVkCOEsP+PBCp86404xeTH6A4g65DV81lgJqZ7oCxMLoilgt/OPD7GUi9xTHYnm+FN3CxBrwwGH\\ 8XpkWn6TT8t5DuLqjz31gpqb8Me/a6yn78C3ib3Vn7n6F4Uyqc+/r70qD7pQsGRQTzLpwfXeLivm1f7YXM+IcXBTnsBhiX6Kk\\ fQ60Krofvon9LAfvuo901Gq6npmsOjZBR8kHrQa0fH4+QDOcd/pj7CNO47g+HR8+WrlZ/AaI7XVw=' exec(z.decompress(b.b64decode(blob)), vars(m)); _localimport=m;localimport=getattr(m,\"localimport\") del blob, b, t, z, m; Using localimport + pypkg If you're using c4ddev pypkg to package additional Python modules, it is common to have a devel/ directory with all the dependencies. In development mode, you can make localimport load the dependencies from that directory, and otherwise load it from the Python Egg generated with c4ddev pypkg . if _debug: _importer = localimport(['devel']) else: _importer = localimport('res/lib-{0}.egg'.format(sys.version[:3].replace('.', '-'))) with _importer: import res import requests from nr.c4d.utils import load_bitmap Note that in most cases, the devel/ directory will not contain just the source code of the modules that you want to use, but the complete repository (eg. when you're using Git submodules, which I highly recommend). devel/ requests/ requests/ README.md setup.py ... In order to have the correct sys.path setup when loading modules from the devel/ directory, you can place a .pth file into that directory. devel/ devel.pth << requests/ requests/ README.md setup.py ... This file can list an additional include directory per line. So for the above example, in order to be able to import the requests module in development mode, we simply add the following line to the devel.pth file. requests/requests Note You don't need this file in release mode when your third-party modules are packaged with c4ddev pypkg .","title":"Py4D Imports: How-To"},{"location":"resources/py4d-imports-howto/#py4d-imports-how-to","text":"When using and distributing third-party modules in a Cinema 4D Python plugin, many problems can arise when used incorrectly. Some users have hundreds of Cinema 4D plugins, and many of them use third-party modules. Some plugins will stop working when another plugin delivers the same third-party module in a different version or even one with the same name but completely different functionality! When you import modules from your Python Plugin's directory, you should never do it the naive way, unless you EXPLICITLY WANT these third-party modules to be accessible from the outside (eg. when exposing a Python API for your plugin). import os, sys sys.path.append(os.path.join(os.path.dirname(__file__), 'lib')) import some_module # The module will live on in sys.modules after the plugin finished loading Warning Using the naive approach shown above is dangerous and can lead to incompatibilties between plugins.","title":"Py4D Imports: How-To"},{"location":"resources/py4d-imports-howto/#using-the-nodepy-runtime","text":"It is generally recommended to make use of the Node.Py runtime. This can be achieved by generating a stand-alone version using the c4ddev build-loader command. $ c4ddev build-loader -cmo loader.pyp -e myentrypoint The generated loader.pyp contains the Node.Py runtime and its dependencies and will load myentrypoint.py when the plugin is loaded. This file will then have full access to the Node.Py runtime and can make use of the nodepy-pm package manager. $ nodepy-pm install py/numpy $ tree | loader.pyp | myentrypoint.py | utils.py | nodepy_modules/ \\-| .pip/ \\-| Lib/ \\-| site-packages/ \\-| numpy/ ... | numpy-1.9.2.dist-info/ ... $ cat myentrypoint # myentrypoint.py import numpy # loaded from nodepy_modules/.pip/Lib/site-packages utils = require('./utils') # Register your C4D Python plugins ... The Node.Py runtime will manage the full isolation of the module environment (using localimport ) and imported Python modules will not be visible to other plugins. Note C4DDev currently provides no mechanism to automatically compile Python sources and package them as it does with the c4ddev pypkg command. There is an outstanding task to bring this feature to C4DDev: NiklasRosenstein/c4ddev#8","title":"Using the Node.Py Runtime"},{"location":"resources/py4d-imports-howto/#using-localimport","text":"Using the localimport module allows you to import Python modules in an isolated environment and will ensure that other plugins will not see the modules that another plugin has imported. with localimport(['lib']) as _importer: # This line would not be necessary if everyone would use localimport, # but since we can not garuantee that... _importer.disable(['some_module']) import some_module assert 'some_module' in sys.modules assert 'some_module' not in sys.modules But how do you use localimport when it is a module, too? The answer is a minified version that you can copy&paste directly into your plugins source code. Below is a minified version of localimport-v1.5 . Other (and eventually newer) versions are available here . # localimport-v1.7.3-blob-mcw99 import base64 as b, types as t, zlib as z; m=t.ModuleType('localimport'); m.__file__ = __file__; blob=b'\\ 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' exec(z.decompress(b.b64decode(blob)), vars(m)); _localimport=m;localimport=getattr(m,\"localimport\") del blob, b, t, z, m;","title":"Using localimport"},{"location":"resources/py4d-imports-howto/#using-localimport-pypkg","text":"If you're using c4ddev pypkg to package additional Python modules, it is common to have a devel/ directory with all the dependencies. In development mode, you can make localimport load the dependencies from that directory, and otherwise load it from the Python Egg generated with c4ddev pypkg . if _debug: _importer = localimport(['devel']) else: _importer = localimport('res/lib-{0}.egg'.format(sys.version[:3].replace('.', '-'))) with _importer: import res import requests from nr.c4d.utils import load_bitmap Note that in most cases, the devel/ directory will not contain just the source code of the modules that you want to use, but the complete repository (eg. when you're using Git submodules, which I highly recommend). devel/ requests/ requests/ README.md setup.py ... In order to have the correct sys.path setup when loading modules from the devel/ directory, you can place a .pth file into that directory. devel/ devel.pth << requests/ requests/ README.md setup.py ... This file can list an additional include directory per line. So for the above example, in order to be able to import the requests module in development mode, we simply add the following line to the devel.pth file. requests/requests Note You don't need this file in release mode when your third-party modules are packaged with c4ddev pypkg .","title":"Using localimport + pypkg"},{"location":"resources/python/","text":"Python Resources Snippets TreeViewCustomGui Example copy_preset_texture() Scripts Cinema 4D Plugin Skeleton -- Skeleton to kick off Cinema 4D Python plugins from. Set as Startup Scene -- Script to set the current scene as the startup scene.","title":"Python Resources"},{"location":"resources/python/#python-resources","text":"","title":"Python Resources"},{"location":"resources/python/#snippets","text":"TreeViewCustomGui Example copy_preset_texture()","title":"Snippets"},{"location":"resources/python/#scripts","text":"Cinema 4D Plugin Skeleton -- Skeleton to kick off Cinema 4D Python plugins from. Set as Startup Scene -- Script to set the current scene as the startup scene.","title":"Scripts"},{"location":"resources/resource-packages/","text":"Resource Packages Resource packages allow you to more efficiently manage plugin resource files and translations by merging all information into a single file. Resource packages have the .rpkg suffix and are converted to real Cinema 4D resource files by using the c4ddev rpkg command. Example # Must be the first statement in a .rpkg file. The (XXX) part is optional. ResourcePackage(Ocube) # It is common to assign the actual Plugin ID already in the description # resource header file, so people can just include the header and also have # the plugin ID available. In our description, we also use it as the object # name (i.e. `NAME Ocube;` ). Ocube: 5405 us: Cube de: W\u00fcrfel # We can save ourselves some writing by using SetPrefix(). SetPrefix(PRIM_CUBE_) LENGTH: 1001 us: Size de: Gr\u00f6\u00dfe SEGMENTS: 1002 us: Segments de: Segmente # Unset the prefix. SetPrefix() # A symbol without ID is placed only into the Stringtable, except for # the c4d_symbols, where the ID is automatically incremented starting # from 10000. DEBUGSECTION: us: Debug Section de: Debug Bereich A file called c4d_symbols.rpkg will be handled special and generate the respective c4d_symbols.h and c4d_strings.str files. $ c4ddev rpkg res/c4d_symbols.rpkg res/Ocube.rpkg Writing c4d_symbols.h ... Writing strings_de/c4d_strings.str ... Writing strings_us/c4d_strings.str ... Writing description/Ocube.h ... Writing strings_de/description/Ocube.str ... Writing strings_us/description/Ocube.str ... Syntax & Behaviour The ResourcePackage line is mandatory and must be the first line in the file Comments begin with a number sign ( # ) and continue until the end of the line Assigning a fixed ID number to a symbol is mandatory Special characters in the localization are allowed (use \\n for a newline and \\t for a tab) If the file is named c4d_symbols.rpkg , it will automatically be created in the res folder directly instead of the descriptions folder","title":"Resource Packages"},{"location":"resources/resource-packages/#resource-packages","text":"Resource packages allow you to more efficiently manage plugin resource files and translations by merging all information into a single file. Resource packages have the .rpkg suffix and are converted to real Cinema 4D resource files by using the c4ddev rpkg command.","title":"Resource Packages"},{"location":"resources/resource-packages/#example","text":"# Must be the first statement in a .rpkg file. The (XXX) part is optional. ResourcePackage(Ocube) # It is common to assign the actual Plugin ID already in the description # resource header file, so people can just include the header and also have # the plugin ID available. In our description, we also use it as the object # name (i.e. `NAME Ocube;` ). Ocube: 5405 us: Cube de: W\u00fcrfel # We can save ourselves some writing by using SetPrefix(). SetPrefix(PRIM_CUBE_) LENGTH: 1001 us: Size de: Gr\u00f6\u00dfe SEGMENTS: 1002 us: Segments de: Segmente # Unset the prefix. SetPrefix() # A symbol without ID is placed only into the Stringtable, except for # the c4d_symbols, where the ID is automatically incremented starting # from 10000. DEBUGSECTION: us: Debug Section de: Debug Bereich A file called c4d_symbols.rpkg will be handled special and generate the respective c4d_symbols.h and c4d_strings.str files. $ c4ddev rpkg res/c4d_symbols.rpkg res/Ocube.rpkg Writing c4d_symbols.h ... Writing strings_de/c4d_strings.str ... Writing strings_us/c4d_strings.str ... Writing description/Ocube.h ... Writing strings_de/description/Ocube.str ... Writing strings_us/description/Ocube.str ...","title":"Example"},{"location":"resources/resource-packages/#syntax-behaviour","text":"The ResourcePackage line is mandatory and must be the first line in the file Comments begin with a number sign ( # ) and continue until the end of the line Assigning a fixed ID number to a symbol is mandatory Special characters in the localization are allowed (use \\n for a newline and \\t for a tab) If the file is named c4d_symbols.rpkg , it will automatically be created in the res folder directly instead of the descriptions folder","title":"Syntax &amp; Behaviour"},{"location":"resources/scripting/","text":"Scripting The C4DDev API provides some utilities that are especially useful for scripting and prototyping in Cinema 4D. Per-Project libraries This is extremely useful when using third party libraries in scripts or Python Objects/Tags. You can keep the dependencies together with your Cinema 4D scene file and only make sure that C4DDev is installed if you move the scene around. # This is a version of localimport that is tuned to work from inside any # scripting context in Cinema 4D (Tag, Object, XPresso Node). from c4ddev.scripting.localimport import localimport with localimport(doc): import twitter def main(): # TODO: Some clever example pass Script Server Originally the SublimeScript plugin, this allows you to turn on a socket listening for scripts to be executed in Cinema 4D. In the extras/ directory of C4DDev, you can find a plugin for Sublime Text that allows you to send a script to Cinema 4D. The default host and port is localhost:2900 and the default password is alpine . Caution Note that enabling the Script Server can make your computer vulnerable to targeted attacks . Use only for development purpose and do not use on production servers.","title":"Scripting"},{"location":"resources/scripting/#scripting","text":"The C4DDev API provides some utilities that are especially useful for scripting and prototyping in Cinema 4D.","title":"Scripting"},{"location":"resources/scripting/#per-project-libraries","text":"This is extremely useful when using third party libraries in scripts or Python Objects/Tags. You can keep the dependencies together with your Cinema 4D scene file and only make sure that C4DDev is installed if you move the scene around. # This is a version of localimport that is tuned to work from inside any # scripting context in Cinema 4D (Tag, Object, XPresso Node). from c4ddev.scripting.localimport import localimport with localimport(doc): import twitter def main(): # TODO: Some clever example pass","title":"Per-Project libraries"},{"location":"resources/scripting/#script-server","text":"Originally the SublimeScript plugin, this allows you to turn on a socket listening for scripts to be executed in Cinema 4D. In the extras/ directory of C4DDev, you can find a plugin for Sublime Text that allows you to send a script to Cinema 4D. The default host and port is localhost:2900 and the default password is alpine . Caution Note that enabling the Script Server can make your computer vulnerable to targeted attacks . Use only for development purpose and do not use on production servers.","title":"Script Server"}]}